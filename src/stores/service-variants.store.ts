import { defineStore } from 'pinia';
import { ref, computed, readonly } from 'vue';
import { api } from 'boot/axios';
import { Notify } from 'quasar';
import type { AxiosError } from 'axios';
import type { QTableProps } from 'quasar';
import {
  usePagination,
  type PaginationResponse,
  type PaginationParams,
} from 'src/composables/usePagination';

const VITE_SITE_ID = import.meta.env.VITE_SITE_ID;

// === –ò–ù–¢–ï–†–§–ï–ô–°–´ ===

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–µ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å SizeFile –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤)
 */
export interface SizeRead {
  readonly id: string;
  readonly value: string;
  readonly measurement_system: string;
  readonly base_value: string;
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞
 */
export interface ProductVariant {
  readonly id: string;
  readonly size: SizeRead;
  readonly sku: string;
  readonly price: string;
  readonly is_active: boolean;
  readonly attributes: Record<string, unknown>;
}

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ —Ç–æ–≤–∞—Ä–∞
 * –†–∞—Å—à–∏—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–æ–∫–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
 */
export interface ProductVariantDetail extends ProductVariant {
  // –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  readonly created?: string;
  readonly updated?: string;
}

/**
 * Payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞
 */
export interface ProductVariantCreatePayload {
  size: string; // UUID —Ä–∞–∑–º–µ—Ä–∞
  sku: string;
  price: string;
  is_active: boolean;
  attributes: Record<string, unknown>;
}

/**
 * Payload –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞
 */
export interface ProductVariantUpdatePayload {
  size: string; // UUID —Ä–∞–∑–º–µ—Ä–∞
  sku: string;
  price: string;
  is_active: boolean;
  attributes: Record<string, unknown>;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ (attachments)
 */
export interface VariantAttachment {
  readonly id: string;
  readonly file: string;
  readonly alt_text?: string;
  readonly is_primary: boolean;
  readonly order: number;
}

/**
 * Payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
 */
export interface VariantAttachmentCreatePayload {
  file: File;
  alt_text?: string | undefined;
  is_primary?: boolean;
  order?: number;
}

/**
 * Payload –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
 */
export interface VariantAttachmentUpdatePayload {
  file?: File;
  alt_text?: string;
  is_primary?: boolean;
  order?: number;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–æ–∫ –æ—Ç API
 */
interface ApiError {
  readonly detail?: string;
  readonly message?: string;
  readonly [key: string]: unknown;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API attachments –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
 */
interface VariantAttachmentsApiResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: VariantAttachment[];
}

// === –°–¢–û–† ===

export const useServiceVariantsStore = defineStore('serviceVariants', () => {
  // === STATE ===
  const variants = ref<readonly ProductVariant[]>([]);
  const selectedVariant = ref<ProductVariantDetail | null>(null);
  const currentServiceId = ref<string | null>(null);

  // –ù–û–í–û–ï: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è attachments –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  const variantAttachments = ref<Record<string, VariantAttachment[]>>({});
  const attachmentsLoading = ref(false);

  // === GETTERS ===
  const siteId = computed(() => VITE_SITE_ID);

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π serviceId
   */
  const hasServiceContext = computed(() => !!currentServiceId.value);

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  const activeVariantsCount = computed(
    () => variants.value.filter((variant) => variant.is_active).length,
  );

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  const inactiveVariantsCount = computed(
    () => variants.value.filter((variant) => !variant.is_active).length,
  );

  // === PAGINATION ===
  const fetchVariantsWithPagination = async (
    url?: string,
    params?: PaginationParams,
  ): Promise<PaginationResponse<ProductVariant>> => {
    if (!siteId.value) {
      throw new Error('VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
    }

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞
    const serviceId = currentServiceId.value;
    if (!serviceId) {
      throw new Error('service_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞.');
    }

    try {
      let requestUrl: string;
      let requestParams: Record<string, string | number | boolean> = {};

      if (url) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É (next/previous)
        requestUrl = url;
      } else {
        // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        requestUrl = `/sites/${siteId.value}/services/${serviceId}/variants/`;
        // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
        requestParams = Object.entries(params ?? {}).reduce(
          (acc, [key, value]) => {
            if (value !== undefined) {
              acc[key] = value;
            }
            return acc;
          },
          {} as Record<string, string | number | boolean>,
        );
      }

      const { data } = await api.get<PaginationResponse<ProductVariant>>(requestUrl, {
        params: url ? {} : requestParams,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      variants.value = Object.freeze(data.results);

      return data;
    } catch (error) {
      handleApiError(
        error as AxiosError<ApiError>,
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞.',
      );
      throw error;
    }
  };

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const pagination = usePagination<ProductVariant>(fetchVariantsWithPagination, {
    defaultPageSize: 10,
    defaultSortBy: 'sku',
    defaultDescending: false,
  });

  // === HELPER FUNCTIONS ===

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ API —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  function handleApiError(error: AxiosError<ApiError>, defaultMessage: string): void {
    console.error(defaultMessage, error);

    // üîç –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);

      // üÜï –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–û–ö –í–ê–õ–ò–î–ê–¶–ò–ò
      if (error.response.data && typeof error.response.data === 'object') {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∑–∞–º–µ–Ω—è–µ–º any –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø
        const responseData = error.response.data as Record<string, unknown>;

        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–∞–º–∏
        Object.entries(responseData).forEach(([key, value]) => {
          console.error(`üö® Validation error for field "${key}":`, value);

          // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
          if (Array.isArray(value)) {
            value.forEach((item, index) => {
              console.error(`  - Error ${index + 1}:`, item);
            });
          }
        });
      }

      console.error('Request config:', error.config);
      console.error('Request data:', error.config?.data);
    }

    let errorMessage = defaultMessage;
    const errorData = error.response?.data;

    if (typeof errorData === 'string') {
      errorMessage = errorData;
    } else if (errorData?.detail) {
      errorMessage = errorData.detail;
    } else if (errorData?.message) {
      errorMessage = errorData.message;
    } else if (error.message) {
      errorMessage = error.message;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—è–º
    if (errorData && typeof errorData === 'object' && !errorData.detail && !errorData.message) {
      const fieldErrors = Object.entries(errorData)
        .map(([key, value]) => {
          if (Array.isArray(value)) {
            return `${key}: ${value.join('; ')}`;
          }
          return `${key}: ${String(value)}`;
        })
        .join('; ');

      if (fieldErrors) {
        errorMessage = `–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${fieldErrors}`;
        console.error('Field validation errors:', errorData);
      }
    }

    Notify.create({
      type: 'negative',
      message: errorMessage,
      timeout: 10000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–∑–º–µ–Ω—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è string | null | undefined
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  function validateRequiredParams(serviceId?: string | null): boolean {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return false;
    }

    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!effectiveServiceId) {
      Notify.create({
        type: 'negative',
        message: 'service_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞.',
      });
      return false;
    }

    return true;
  }

  /**
   * üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
   */
  async function checkExistingVariant(sizeId: string, serviceId?: string | null): Promise<boolean> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return false;
    }

    try {
      console.log('üîç Checking existing variants for:', {
        serviceId: effectiveServiceId,
        sizeId,
        url: `/sites/${siteId.value}/services/${effectiveServiceId}/variants/`,
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
      const { data } = await api.get<PaginationResponse<ProductVariant>>(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/`,
        {
          params: {
            page_size: 1000, // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            // –ù–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ is_active - —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å –≤—Å–µ
          },
        },
      );

      console.log('üìä All existing variants:', data.results);
      console.log('üî¢ Total variants count:', data.count);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É
      const existingVariantWithSameSize = data.results.find(
        (variant) => variant.size.id === sizeId,
      );

      if (existingVariantWithSameSize) {
        console.log('üö® Found existing variant with same size:', existingVariantWithSameSize);
        return true;
      }

      console.log('‚úÖ No conflicts found, size is available');
      return false;
    } catch (error) {
      console.error('Error checking existing variants:', error);
      return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
   */
  function setServiceContext(serviceId: string): void {
    if (!serviceId) {
      console.warn('–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–π serviceId');
      return;
    }
    currentServiceId.value = serviceId;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞
   */
  function clearServiceContext(): void {
    currentServiceId.value = null;
    variants.value = [];
    selectedVariant.value = null;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
   */
  function clearSelectedVariant(): void {
    selectedVariant.value = null;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async function fetchVariants(
    serviceId?: string | null,
    url?: string,
  ): Promise<readonly ProductVariant[]> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return [];
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω serviceId
    if (serviceId) {
      setServiceContext(serviceId);
    }

    try {
      return await pagination.fetchData(url);
    } catch (error) {
      console.error('Error in fetchVariants:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
   */
  async function fetchVariantById(
    variantId: string,
    serviceId?: string | null,
  ): Promise<ProductVariantDetail | null> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return null;
    }

    if (!variantId) {
      console.warn('variantId is required');
      return null;
    }

    try {
      const { data } = await api.get<ProductVariantDetail>(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/`,
      );
      selectedVariant.value = Object.freeze(data);
      return data;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞.');
      selectedVariant.value = null;
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞
   */
  async function createVariant(
    payload: ProductVariantCreatePayload,
    serviceId?: string | null,
  ): Promise<ProductVariantDetail | null> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return null;
    }

    if (!payload.size) {
      Notify.create({ type: 'negative', message: '–†–∞–∑–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.' });
      return null;
    }

    // üÜï –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –í–ê–†–ò–ê–ù–¢–´ –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú
    console.log('üîç Pre-checking for existing variants...');
    const hasConflict = await checkExistingVariant(payload.size, effectiveServiceId);

    if (hasConflict) {
      Notify.create({
        type: 'negative',
        message:
          '–î–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.',
        timeout: 8000,
      });
      return null;
    }

    // üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const requestData = {
      size: payload.size,
      sku: payload.sku || '',
      price: payload.price || '0',
      is_active: payload.is_active,
      attributes: payload.attributes || {},
    };

    console.log('üöÄ Creating variant with data:', requestData);
    console.log('üåê URL:', `/sites/${siteId.value}/services/${effectiveServiceId}/variants/`);

    try {
      const { data } = await api.post<ProductVariantDetail>(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/`,
        requestData,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        },
      );

      Notify.create({
        type: 'positive',
        message: `–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ ${data.sku ? `"${data.sku}"` : ''} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await fetchVariants(effectiveServiceId);
      return Object.freeze(data);
    } catch (err) {
      const axiosError = err as AxiosError<ApiError>;

      // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
      console.error('‚ùå CREATE VARIANT ERROR:', {
        status: axiosError.response?.status,
        statusText: axiosError.response?.statusText,
        url: axiosError.config?.url,
        method: axiosError.config?.method,
        data: axiosError.config?.data,
        responseData: axiosError.response?.data,
      });

      // –î–ª—è –æ—à–∏–±–∫–∏ 500 (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞) –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è retry
      if (axiosError.response?.status === 500) {
        console.error('üö® SERVER ERROR 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ');
        Notify.create({
          type: 'negative',
          message: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.',
          timeout: 10000,
        });
        return null;
      }

      // –î–ª—è –æ—à–∏–±–∫–∏ 400 –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
      if (axiosError.response?.status === 400) {
        console.log('üí° Retrying with string price...');
        const retryData = { ...requestData, price: String(payload.price || '0') };

        try {
          const { data } = await api.post<ProductVariantDetail>(
            `/sites/${siteId.value}/services/${effectiveServiceId}/variants/`,
            retryData,
            {
              headers: {
                'Content-Type': 'application/json',
              },
            },
          );

          Notify.create({
            type: 'positive',
            message: `–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ ${data.sku ? `"${data.sku}"` : ''} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`,
          });

          await fetchVariants(effectiveServiceId);
          return Object.freeze(data);
        } catch (retryErr) {
          handleApiError(
            retryErr as AxiosError<ApiError>,
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞ (retry).',
          );
          return null;
        }
      }

      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
      handleApiError(axiosError, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞.');
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ (–ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
   */
  async function updateVariant(
    variantId: string,
    payload: ProductVariantUpdatePayload,
    serviceId?: string | null,
  ): Promise<ProductVariantDetail | null> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return null;
    }

    if (!variantId) {
      console.warn('variantId is required');
      return null;
    }

    if (!payload.size) {
      Notify.create({ type: 'negative', message: '–†–∞–∑–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.' });
      return null;
    }

    try {
      const { data } = await api.put<ProductVariantDetail>(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/`,
        {
          size: payload.size,
          sku: payload.sku || '',
          price: payload.price || '',
          is_active: payload.is_active,
          attributes: payload.attributes || {},
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
        },
      );

      Notify.create({
        type: 'positive',
        message: `–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ ${data.sku ? `"${data.sku}"` : ''} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await fetchVariants(effectiveServiceId);
      if (selectedVariant.value?.id === variantId) {
        await fetchVariantById(variantId, effectiveServiceId);
      }
      return Object.freeze(data);
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞.');
      return null;
    }
  }

  /**
   * –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ (PATCH)
   */
  async function patchVariant(
    variantId: string,
    payload: Partial<ProductVariantUpdatePayload>,
    serviceId?: string | null,
  ): Promise<ProductVariantDetail | null> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return null;
    }

    if (!variantId) {
      console.warn('variantId is required');
      return null;
    }

    try {
      const { data } = await api.patch<ProductVariantDetail>(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/`,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        },
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      const variantIndex = variants.value.findIndex((variant) => variant.id === variantId);
      if (variantIndex !== -1 && variants.value[variantIndex]) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        const updatedVariants = [...variants.value];
        updatedVariants[variantIndex] = Object.freeze({
          ...updatedVariants[variantIndex],
          ...data,
        });
        variants.value = Object.freeze(updatedVariants);
      }

      return Object.freeze(data);
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞.');
      return null;
    }
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
   * –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  async function patchVariantStatus(
    variantId: string,
    isActive: boolean,
    serviceId?: string | null,
  ): Promise<boolean> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return false;
    }

    if (!variantId) {
      console.warn('variantId is required');
      return false;
    }

    try {
      await api.patch(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/`,
        { is_active: isActive },
      );

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞
      const variantIndex = variants.value.findIndex((variant) => variant.id === variantId);
      if (variantIndex !== -1 && variants.value[variantIndex]) {
        const currentVariant = variants.value[variantIndex];
        if (currentVariant) {
          const updatedVariants = [...variants.value];
          updatedVariants[variantIndex] = Object.freeze({
            ...currentVariant,
            is_active: isActive,
          });
          variants.value = Object.freeze(updatedVariants);
        }
      }

      return true;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.');
      return false;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞
   */
  async function deleteVariant(variantId: string, serviceId?: string | null): Promise<boolean> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return false;
    }

    if (!variantId) {
      console.warn('variantId is required');
      return false;
    }

    try {
      await api.delete(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/`,
      );

      Notify.create({
        type: 'positive',
        message: '–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.',
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await fetchVariants(effectiveServiceId);
      if (selectedVariant.value?.id === variantId) {
        selectedVariant.value = null;
      }
      return true;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞.');
      return false;
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  async function bulkDeleteVariants(
    variantIds: readonly string[],
    serviceId?: string | null,
  ): Promise<boolean> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return false;
    }

    if (!variantIds || variantIds.length === 0) {
      console.warn('variantIds array is required and cannot be empty');
      return false;
    }

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ DELETE –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.all(
        variantIds.map((id) =>
          api.delete(`/sites/${siteId.value}/services/${effectiveServiceId}/variants/${id}/`),
        ),
      );

      Notify.create({
        type: 'positive',
        message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${variantIds.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞.`,
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      await fetchVariants(effectiveServiceId);
      return true;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
      return false;
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  async function bulkUpdateVariantStatus(
    variantIds: readonly string[],
    isActive: boolean,
    serviceId?: string | null,
  ): Promise<boolean> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return false;
    }

    if (!variantIds || variantIds.length === 0) {
      console.warn('variantIds array is required and cannot be empty');
      return false;
    }

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ PATCH –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.all(
        variantIds.map((id) =>
          api.patch(`/sites/${siteId.value}/services/${effectiveServiceId}/variants/${id}/`, {
            is_active: isActive,
          }),
        ),
      );

      Notify.create({
        type: 'positive',
        message: `–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${variantIds.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–∞.`,
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      await fetchVariants(effectiveServiceId);
      return true;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
      return false;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  async function searchVariants(
    query: string,
    serviceId?: string | null,
  ): Promise<readonly ProductVariant[]> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return [];
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
    if (serviceId) {
      setServiceContext(serviceId);
    }

    try {
      pagination.setSearch(query);
      return await pagination.fetchData();
    } catch (error) {
      console.error('Error in searchVariants:', error);
      return [];
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   */
  async function filterVariants(
    filters: Record<string, string | number | boolean | undefined>,
    serviceId?: string | null,
  ): Promise<readonly ProductVariant[]> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return [];
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    if (serviceId) {
      setServiceContext(serviceId);
    }

    try {
      Object.entries(filters).forEach(([key, value]) => {
        pagination.setFilter(key, value);
      });

      return await pagination.fetchData();
    } catch (error) {
      console.error('Error in filterVariants:', error);
      return [];
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
   */
  async function clearFilters(serviceId?: string | null): Promise<readonly ProductVariant[]> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return [];
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    if (serviceId) {
      setServiceContext(serviceId);
    }

    try {
      pagination.clearFilters();
      return await pagination.fetchData();
    } catch (error) {
      console.error('Error in clearFilters:', error);
      return [];
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç QTable (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ú–ï–¢–û–î!)
   */
  async function handleTableRequest(props: {
    pagination: QTableProps['pagination'];
  }): Promise<readonly ProductVariant[]> {
    if (!props.pagination) {
      console.warn('pagination props are required');
      return [];
    }

    const effectiveServiceId = currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId)) {
      return [];
    }

    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º handleTableRequest –∏–∑ –∫–æ–º–ø–æ–∑–∞–±–ª–∞
      return await pagination.handleTableRequest(props);
    } catch (error) {
      console.error('Error in handleTableRequest:', error);
      return [];
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° ATTACHMENTS –í–ê–†–ò–ê–ù–¢–û–í ===

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  function validateImageFile(file: File): { isValid: boolean; error?: string } {
    const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    const maxSizeBytes = 10 * 1024 * 1024; // 10MB

    if (!imageTypes.includes(file.type)) {
      return { isValid: false, error: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPG, PNG, GIF, WebP).' };
    }

    if (file.size > maxSizeBytes) {
      return { isValid: false, error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB.' };
    }

    return { isValid: true };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ attachments –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  function getVariantAttachments(variantId: string): VariantAttachment[] {
    return variantAttachments.value[variantId] || [];
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ attachments –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  async function fetchVariantAttachments(
    variantId: string,
    serviceId?: string | null,
  ): Promise<VariantAttachment[]> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId) || !variantId) {
      console.warn('serviceId and variantId are required');
      return [];
    }

    attachmentsLoading.value = true;
    try {
      const { data } = await api.get<VariantAttachmentsApiResponse>(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/attachments/`,
      );

      variantAttachments.value = {
        ...variantAttachments.value,
        [variantId]: data.results,
      };

      return data.results;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞.');
      return [];
    } finally {
      attachmentsLoading.value = false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ attachment –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  async function createVariantAttachment(
    variantId: string,
    payload: VariantAttachmentCreatePayload,
    serviceId?: string | null,
  ): Promise<VariantAttachment | null> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId) || !variantId || !payload.file) {
      console.warn('serviceId, variantId and file are required');
      return null;
    }

    attachmentsLoading.value = true;
    try {
      const formData = new FormData();
      formData.append('file', payload.file);

      if (payload.alt_text) formData.append('alt_text', payload.alt_text);
      if (payload.is_primary !== undefined)
        formData.append('is_primary', String(payload.is_primary));
      if (payload.order !== undefined) formData.append('order', String(payload.order));

      const uploadUrl = `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/attachments/`;
      console.log('üöÄ POST request to:', uploadUrl);
      console.log(
        'üì¶ FormData entries:',
        Array.from(formData.entries()).map(([key, value]) =>
          value instanceof File ? [key, `File(${value.name})`] : [key, value],
        ),
      );

      const { data } = await api.post<VariantAttachment>(uploadUrl, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });

      console.log('‚úÖ Upload successful:', data);

      Notify.create({ type: 'positive', message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.' });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      await fetchVariantAttachments(variantId, effectiveServiceId);

      return data;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞.');
      return null;
    } finally {
      attachmentsLoading.value = false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ attachment –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  async function updateVariantAttachment(
    variantId: string,
    attachmentId: string,
    payload: VariantAttachmentUpdatePayload,
    serviceId?: string | null,
  ): Promise<VariantAttachment | null> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId) || !variantId || !attachmentId) {
      console.warn('serviceId, variantId and attachmentId are required');
      return null;
    }

    attachmentsLoading.value = true;
    try {
      const formData = new FormData();

      if (payload.file) formData.append('file', payload.file);
      if (payload.alt_text !== undefined) formData.append('alt_text', payload.alt_text);
      if (payload.is_primary !== undefined)
        formData.append('is_primary', String(payload.is_primary));
      if (payload.order !== undefined) formData.append('order', String(payload.order));

      const { data } = await api.patch<VariantAttachment>(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/attachments/${attachmentId}/`,
        formData,
        { headers: { 'Content-Type': 'multipart/form-data' } },
      );

      Notify.create({ type: 'positive', message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.' });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      await fetchVariantAttachments(variantId, effectiveServiceId);

      return data;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞.');
      return null;
    } finally {
      attachmentsLoading.value = false;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ attachment –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  async function deleteVariantAttachment(
    variantId: string,
    attachmentId: string,
    serviceId?: string | null,
  ): Promise<boolean> {
    const effectiveServiceId = serviceId || currentServiceId.value;
    if (!validateRequiredParams(effectiveServiceId) || !variantId || !attachmentId) {
      console.warn('serviceId, variantId and attachmentId are required');
      return false;
    }

    attachmentsLoading.value = true;
    try {
      await api.delete(
        `/sites/${siteId.value}/services/${effectiveServiceId}/variants/${variantId}/attachments/${attachmentId}/`,
      );

      Notify.create({ type: 'positive', message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.' });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à
      await fetchVariantAttachments(variantId, effectiveServiceId);

      return true;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞.');
      return false;
    } finally {
      attachmentsLoading.value = false;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  async function setVariantPrimaryAttachment(
    variantId: string,
    attachmentId: string,
    serviceId?: string | null,
  ): Promise<boolean> {
    return !!(await updateVariantAttachment(
      variantId,
      attachmentId,
      { is_primary: true },
      serviceId,
    ));
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ attachments –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  async function uploadMultipleVariantAttachments(
    variantId: string,
    files: File[],
    altTexts?: string[],
    serviceId?: string | null,
  ): Promise<VariantAttachment[]> {
    console.log('üîÑ uploadMultipleVariantAttachments called with:', {
      variantId,
      filesCount: files.length,
      altTextsCount: altTexts?.length || 0,
      serviceId,
    });

    const effectiveServiceId = serviceId || currentServiceId.value;
    console.log('üîç Validation check:', {
      hasEffectiveServiceId: !!effectiveServiceId,
      hasVariantId: !!variantId,
      hasFiles: !!files.length,
      validateRequiredParams: validateRequiredParams(effectiveServiceId),
    });

    if (!validateRequiredParams(effectiveServiceId) || !variantId || !files.length) {
      console.warn('‚ùå Validation failed - serviceId, variantId and files are required');
      return [];
    }

    console.log('‚úÖ Using serviceId:', effectiveServiceId);
    console.log(
      'üéØ Will upload to URL pattern: /sites/{siteId}/services/{serviceId}/variants/{variantId}/attachments/',
    );
    const results: VariantAttachment[] = [];
    const isFirstUpload = getVariantAttachments(variantId).length === 0;

    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      if (!file) continue;

      console.log(`üì§ Processing file ${i + 1}/${files.length}:`, {
        name: file.name,
        type: file.type,
        size: file.size,
        altText: altTexts?.[i],
      });

      const validation = validateImageFile(file);
      if (!validation.isValid) {
        console.warn(`‚ùå File validation failed for ${file.name}:`, validation.error);
        Notify.create({
          type: 'negative',
          message: `${file.name}: ${validation.error}`,
        });
        continue;
      }

      const payload: VariantAttachmentCreatePayload = {
        file,
        alt_text: altTexts?.[i],
        is_primary: i === 0 && isFirstUpload,
        order: getVariantAttachments(variantId).length + i,
      };

      console.log(`üöÄ Calling createVariantAttachment for file: ${file.name}`, payload);
      const result = await createVariantAttachment(variantId, payload, effectiveServiceId);
      if (result) {
        console.log(`‚úÖ Successfully uploaded file: ${file.name}`, result);
        results.push(result);
      } else {
        console.error(`‚ùå Failed to upload file: ${file.name}`);
      }
    }

    if (results.length > 0) {
      console.log(`üéâ All files uploaded successfully. Total: ${results.length}`);
      Notify.create({
        type: 'positive',
        message: `–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${results.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞.`,
      });
    }

    return results;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ attachments –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
   */
  function clearVariantAttachments(variantId?: string): void {
    if (variantId) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { [variantId]: _removed, ...rest } = variantAttachments.value;
      variantAttachments.value = rest;
    } else {
      variantAttachments.value = {};
    }
  }

  // === RETURN STORE INTERFACE ===
  return {
    // State
    variants: computed(() => variants.value),
    selectedVariant: computed(() => selectedVariant.value),
    currentServiceId: computed(() => currentServiceId.value),
    loading: pagination.loading,

    // Computed getters
    hasServiceContext,
    activeVariantsCount,
    inactiveVariantsCount,

    // Pagination state
    currentPage: computed(() => pagination.currentPage.value),
    pageSize: computed(() => pagination.pageSize.value),
    totalCount: computed(() => pagination.totalCount.value),
    totalPages: computed(() => pagination.totalPages.value),
    hasNext: computed(() => pagination.hasNext.value),
    hasPrevious: computed(() => pagination.hasPrevious.value),
    qTablePagination: pagination.qTablePagination,

    // Context methods
    setServiceContext,
    clearServiceContext,

    // CRUD methods
    fetchVariants,
    fetchVariantById,
    createVariant,
    updateVariant,
    patchVariant,
    deleteVariant,
    clearSelectedVariant,
    checkExistingVariant, // üÜï –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

    // Status management
    patchVariantStatus,

    // Bulk operations
    bulkDeleteVariants,
    bulkUpdateVariantStatus,

    // Search & Filter methods
    searchVariants,
    filterVariants,
    clearFilters,

    // Pagination methods
    goToPage: pagination.goToPage,
    goToNextPage: pagination.goToNextPage,
    goToPreviousPage: pagination.goToPreviousPage,

    // üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ú–ï–¢–û–î - –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ!
    handleTableRequest,

    // Attachments
    variantAttachments: readonly(variantAttachments),
    attachmentsLoading: readonly(attachmentsLoading),
    validateImageFile,
    getVariantAttachments,
    fetchVariantAttachments,
    createVariantAttachment,
    updateVariantAttachment,
    deleteVariantAttachment,
    setVariantPrimaryAttachment,
    uploadMultipleVariantAttachments,
    clearVariantAttachments,
  };
});
