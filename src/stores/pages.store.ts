import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import { api } from 'boot/axios';
import { Notify } from 'quasar';
import type { AxiosError } from 'axios';
import {
  usePagination,
  type PaginationResponse,
  type PaginationParams,
} from 'src/composables/usePagination';

const VITE_SITE_ID = import.meta.env.VITE_SITE_ID;

// ============================================================================
// –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –°–¢–†–û–ì–û–ô –¢–ò–ü–ò–ó–ê–¶–ò–ò
// ============================================================================

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è/–∞–≤—Ç–æ—Ä–∞
 */
export interface Creator {
  readonly id: string;
  readonly email: string;
  readonly role: string;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ—Ç–∞-—Ç–µ–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export interface PageMetaTag {
  readonly id: string;
  readonly name: string;
  readonly content: string;
}

/**
 * –¢–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã (enum)
 */
export type PageType = 'page' | 'promo';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫—Ä–∞—Ç–∫–∏–π –¥–ª—è —Å–ø–∏—Å–∫–æ–≤)
 */
export interface PageFile {
  readonly id: string;
  readonly title: string | null;
  readonly description: string | null;
  readonly keywords: string | null;
  readonly slug: string;
  readonly name: string;
  readonly content: string;
  readonly is_published: boolean;
  readonly page_type: PageType;
  readonly page_type_display: string;
  readonly meta_tags: readonly PageMetaTag[];
  readonly created: string; // ISO DateTime
  readonly updated: string; // ISO DateTime
  readonly file: string | null; // URL —Ñ–∞–π–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
  readonly file_name: string | null;
  readonly file_type: string | null;
  readonly blurhash: string | null;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
export interface PageDetail extends PageFile {
  readonly creator?: Creator | null;
  readonly site?: string | null;
}

/**
 * Payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export interface PageCreatePayload {
  name: string; // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
  content: string; // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
  title?: string | undefined; // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
  description?: string | undefined; // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
  keywords?: string | undefined; // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
  slug?: string | undefined; // –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å
  is_published?: boolean | undefined;
  page_type?: PageType | undefined;
  file?: File | undefined; // üÜï –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
}

/**
 * Payload –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export interface PageUpdatePayload {
  name?: string | undefined;
  content?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  keywords?: string | undefined;
  slug?: string | undefined;
  is_published?: boolean | undefined;
  page_type?: PageType | undefined;
  file?: File | undefined; // üÜï –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
}

/**
 * üÜï –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –¥–ª—è UI)
 */
export interface PageFormData {
  id?: string | undefined;
  name: string;
  content: string;
  title: string;
  description: string;
  keywords: string;
  slug: string;
  is_published: boolean;
  page_type: PageType;
  file: File | null | undefined;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–æ–∫ –æ—Ç API
 */
interface ApiError {
  readonly detail?: string;
  readonly message?: string;
  readonly [key: string]: unknown;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å response (–¥–ª—è type guard)
 */
interface ErrorWithResponse {
  response?: {
    status?: number;
    data?: ApiError;
  };
}

/**
 * –¢–∏–ø –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ (–¥–ª—è type guards)
 */
type UnknownObject = Record<string, unknown>;

// ============================================================================
// UTILITY –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° READONLY –ò–ù–¢–ï–†–§–ï–ô–°–ê–ú–ò
// ============================================================================

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ PageDetail –∏–∑ PageFile
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å–æ spread –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è readonly –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
 * –ü—Ä–∏ exactOptionalPropertyTypes: true –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —è–≤–Ω–æ
 */
function createPageDetailFromPageFile(pageFile: PageFile): PageDetail {
  return {
    id: pageFile.id,
    title: pageFile.title,
    description: pageFile.description,
    keywords: pageFile.keywords,
    slug: pageFile.slug,
    name: pageFile.name,
    content: pageFile.content,
    is_published: pageFile.is_published,
    page_type: pageFile.page_type,
    page_type_display: pageFile.page_type_display,
    meta_tags: pageFile.meta_tags,
    created: pageFile.created,
    updated: pageFile.updated,
    file: pageFile.file,
    file_name: pageFile.file_name,
    file_type: pageFile.file_type,
    blurhash: pageFile.blurhash,
    // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º creator –∏ site, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
    // –ü—Ä–∏ exactOptionalPropertyTypes: true —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
  };
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ PageDetail —Å —è–≤–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è creator –∏ site
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å null –¥–ª—è —ç—Ç–∏—Ö –ø–æ–ª–µ–π
 */
function createPageDetailWithDefaults(
  pageFile: PageFile,
  creator: Creator | null = null,
  site: string | null = null,
): PageDetail {
  return {
    id: pageFile.id,
    title: pageFile.title,
    description: pageFile.description,
    keywords: pageFile.keywords,
    slug: pageFile.slug,
    name: pageFile.name,
    content: pageFile.content,
    is_published: pageFile.is_published,
    page_type: pageFile.page_type,
    page_type_display: pageFile.page_type_display,
    meta_tags: pageFile.meta_tags,
    created: pageFile.created,
    updated: pageFile.updated,
    file: pageFile.file,
    file_name: pageFile.file_name,
    file_type: pageFile.file_type,
    blurhash: pageFile.blurhash,
    creator,
    site,
  };
}

// ============================================================================
// TYPE GUARDS –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ô –¢–ò–ü–ò–ó–ê–¶–ò–ò
// ============================================================================

/**
 * Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
 */
function isValidObject(item: unknown): item is UnknownObject {
  return typeof item === 'object' && item !== null && !Array.isArray(item);
}

/**
 * Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ PageFile
 */
export function isValidPageFile(item: unknown): item is PageFile {
  if (!isValidObject(item)) {
    console.warn('‚ùå isValidPageFile: –Ω–µ –æ–±—ä–µ–∫—Ç –∏–ª–∏ null', item);
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  const requiredFields = [
    { name: 'id', type: 'string' },
    { name: 'name', type: 'string' },
    { name: 'content', type: 'string' },
    { name: 'slug', type: 'string' },
    { name: 'is_published', type: 'boolean' },
    { name: 'page_type', type: 'string' },
    { name: 'created', type: 'string' },
    { name: 'updated', type: 'string' },
    { name: 'page_type_display', type: 'string' },
  ];

  for (const field of requiredFields) {
    if (typeof item[field.name] !== field.type) {
      console.warn(
        `‚ùå isValidPageFile: –ø–æ–ª–µ ${field.name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ${field.type}, –ø–æ–ª—É—á–µ–Ω–æ:`,
        typeof item[field.name],
        item[field.name],
      );
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–º–æ–≥—É—Ç –±—ã—Ç—å null, undefined –∏–ª–∏ string)
  const optionalStringFields = [
    'title',
    'description',
    'keywords',
    'file',
    'file_name',
    'file_type',
    'blurhash',
  ];

  for (const field of optionalStringFields) {
    const value = item[field];
    if (value !== null && value !== undefined && typeof value !== 'string') {
      console.warn(
        `‚ùå isValidPageFile: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ ${field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å string, null –∏–ª–∏ undefined, –ø–æ–ª—É—á–µ–Ω–æ:`,
        typeof value,
        value,
      );
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º meta_tags (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º)
  if (!Array.isArray(item.meta_tags)) {
    console.warn(
      '‚ùå isValidPageFile: meta_tags –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º, –ø–æ–ª—É—á–µ–Ω–æ:',
      typeof item.meta_tags,
      item.meta_tags,
    );
    return false;
  }

  console.log('‚úÖ isValidPageFile: –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã');
  return true;
}

/**
 * Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ PageDetail
 */
export function isValidPageDetail(item: unknown): item is PageDetail {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π PageFile
  if (!isValidPageFile(item)) {
    console.warn('‚ùå isValidPageDetail: –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É isValidPageFile', item);
    return false;
  }

  if (!isValidObject(item)) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è PageDetail
  // creator –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, null –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
  if (item.creator !== undefined && item.creator !== null) {
    if (!isValidObject(item.creator)) {
      console.warn('‚ùå isValidPageDetail: creator –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º', item.creator);
      return false;
    }

    if (
      typeof item.creator.id !== 'string' ||
      typeof item.creator.email !== 'string' ||
      typeof item.creator.role !== 'string'
    ) {
      console.warn('‚ùå isValidPageDetail: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ creator', item.creator);
      return false;
    }
  }

  // site –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, null –∏–ª–∏ string
  if (item.site !== undefined && item.site !== null && typeof item.site !== 'string') {
    console.warn('‚ùå isValidPageDetail: site –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å string, null –∏–ª–∏ undefined', item.site);
    return false;
  }

  console.log('‚úÖ isValidPageDetail: –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã', item);
  return true;
}

/**
 * Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
export function isValidPagesArray(items: unknown): items is readonly PageFile[] {
  return Array.isArray(items) && items.every(isValidPageFile);
}

/**
 * Type guard –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–∫–∏ —Å response
 */
function isErrorWithResponse(error: unknown): error is ErrorWithResponse {
  return typeof error === 'object' && error !== null && 'response' in error;
}

// ============================================================================
// PINIA STORE
// ============================================================================

export const usePagesStore = defineStore('pages', () => {
  // === STATE ===
  const pages = ref<readonly PageFile[]>([]);
  const selectedPage = ref<PageDetail | null>(null);

  // === GETTERS ===
  const siteId = computed(() => VITE_SITE_ID);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  const publishedPages = computed(() => {
    if (!pages.value) return [];
    return pages.value.filter((page) => page?.is_published === true);
  });

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  const unpublishedPages = computed(() => {
    if (!pages.value) return [];
    return pages.value.filter((page) => page?.is_published === false);
  });

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
   */
  function handleApiError(error: AxiosError<ApiError> | Error, defaultMessage: string): void {
    let errorMessage = defaultMessage;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –∞ –Ω–µ –Ω–∞—à–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (error instanceof Error && !isErrorWithResponse(error)) {
      // –≠—Ç–æ –Ω–∞—à–∞ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
      if (error.message.includes('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')) {
        errorMessage = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
      } else {
        errorMessage = error.message;
      }
    } else if (isErrorWithResponse(error) && error.response?.data) {
      // –≠—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç API
      const apiError = error.response.data;
      errorMessage = apiError?.detail ?? apiError?.message ?? defaultMessage;
    } else if (error.message) {
      errorMessage = `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`;
    }

    console.error('API Error:', {
      message: errorMessage,
      status: isErrorWithResponse(error) ? error.response?.status : undefined,
      data: isErrorWithResponse(error) ? error.response?.data : undefined,
      url: (error as AxiosError).config?.url,
      originalError: error,
    });

    Notify.create({
      type: 'negative',
      message: errorMessage,
      position: 'top',
      timeout: 5000,
    });
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  function validateCreatePayload(payload: PageCreatePayload): boolean {
    if (!payload.name?.trim()) {
      Notify.create({
        type: 'negative',
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
      });
      return false;
    }

    if (!payload.content?.trim()) {
      Notify.create({
        type: 'negative',
        message: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
      });
      return false;
    }

    return true;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è payload –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  function validateUpdatePayload(payload: PageUpdatePayload): boolean {
    if (payload.name !== undefined && !payload.name?.trim()) {
      Notify.create({
        type: 'negative',
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
      });
      return false;
    }

    if (payload.content !== undefined && !payload.content?.trim()) {
      Notify.create({
        type: 'negative',
        message: '–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
      });
      return false;
    }

    return true;
  }

  // === –ü–ê–ì–ò–ù–ê–¶–ò–Ø ===

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  const fetchPagesApiCall = async (
    url?: string,
    params?: PaginationParams,
  ): Promise<PaginationResponse<PageFile>> => {
    if (!siteId.value) {
      throw new Error('VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
    }

    try {
      let requestUrl: string;
      let requestParams: Record<string, string | number | boolean> = {};

      if (url) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É (next/previous)
        requestUrl = url;
      } else {
        // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        requestUrl = `/sites/${siteId.value}/pages/?page_type=promo`;
        // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        requestParams = Object.entries(params ?? {}).reduce(
          (acc, [key, value]) => {
            if (value !== undefined) {
              acc[key] = value;
            }
            return acc;
          },
          {} as Record<string, string | number | boolean>,
        );
      }

      const { data } = await api.get<PaginationResponse<PageFile>>(requestUrl, {
        params: url ? {} : requestParams,
      });

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!isValidPagesArray(data.results)) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç API');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü (–∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ)
      pages.value = Object.freeze(data.results);

      return data;
    } catch (error) {
      handleApiError(error as AxiosError<ApiError> | Error, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü.');
      throw error;
    }
  };

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  const pagination = usePagination<PageFile>(fetchPagesApiCall, {
    defaultPageSize: 10,
    defaultSortBy: 'created',
    defaultDescending: true,
  });

  // === –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async function fetchPages(url?: string): Promise<readonly PageFile[]> {
    try {
      return await pagination.fetchData(url);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ ID
   */
  async function fetchPageById(pageId: string): Promise<PageDetail | null> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return null;
    }

    if (!pageId?.trim()) {
      console.warn('pageId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      return null;
    }

    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å ID:', pageId);

      const { data } = await api.get<PageDetail>(`/sites/${siteId.value}/pages/${pageId}/`);

      console.log('üìÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç API:', data);

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!isValidPageDetail(data)) {
        console.warn(
          '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é PageDetail, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile:',
          data,
        );

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if (isValidPageFile(data)) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã –∫–∞–∫ PageFile, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö');
          const pageDetail = createPageDetailFromPageFile(data);
          selectedPage.value = Object.freeze(pageDetail);
          return pageDetail;
        }

        console.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã –Ω–∏ –∫–∞–∫ PageDetail, –Ω–∏ –∫–∞–∫ PageFile');
        throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç API');
      }

      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ PageDetail');
      selectedPage.value = Object.freeze(data);
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      handleApiError(
        error as AxiosError<ApiError> | Error,
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
      );
      selectedPage.value = null;
      return null;
    }
  }

  /**
   * üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤
   */
  async function createPage(payload: PageCreatePayload): Promise<PageDetail | null> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return null;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è payload
    if (!validateCreatePayload(payload)) {
      return null;
    }

    try {
      // üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º FormData –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–∞–π–ª–æ–≤
      const formData = new FormData();

      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      formData.append('name', payload.name);
      formData.append('content', payload.content);

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ù–ï –ø—É—Å—Ç—ã–µ
      if (payload.title && payload.title.trim()) {
        formData.append('title', payload.title.trim());
      }
      if (payload.description && payload.description.trim()) {
        formData.append('description', payload.description.trim());
      }
      if (payload.keywords && payload.keywords.trim()) {
        formData.append('keywords', payload.keywords.trim());
      }
      if (payload.slug && payload.slug.trim()) {
        formData.append('slug', payload.slug.trim());
      }

      // Boolean –ø–æ–ª—è - –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å —è–≤–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
      formData.append('is_published', String(payload.is_published ?? false));
      formData.append('page_type', payload.page_type ?? 'page');

      // üÜï –§–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (payload.file instanceof File) {
        formData.append('file', payload.file);
      }

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData:', {
        name: payload.name,
        content: payload.content,
        title: payload.title,
        description: payload.description,
        keywords: payload.keywords,
        slug: payload.slug,
        is_published: payload.is_published,
        page_type: payload.page_type,
        hasFile: payload.file instanceof File,
        fileName: payload.file?.name,
      });

      const { data } = await api.post<PageDetail>(
        `/sites/${siteId.value}/pages/?page_type=promo`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        },
      );

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', data);

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!isValidPageDetail(data)) {
        console.warn(
          '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é PageDetail, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile:',
          data,
        );

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if (isValidPageFile(data)) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã –∫–∞–∫ PageFile, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PageDetail');
          const pageDetail = createPageDetailFromPageFile(data);

          Notify.create({
            type: 'positive',
            message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageDetail.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`,
          });

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
          await fetchPages();
          return Object.freeze(pageDetail);
        }

        console.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã –Ω–∏ –∫–∞–∫ PageDetail, –Ω–∏ –∫–∞–∫ PageFile');
        throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç API');
      }

      Notify.create({
        type: 'positive',
        message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${data.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`,
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
      await fetchPages();

      return Object.freeze(data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      handleApiError(error as AxiosError<ApiError> | Error, '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return null;
    }
  }

  /**
   * üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤ (PUT - –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
   */
  async function updatePage(
    pageId: string,
    payload: PageUpdatePayload,
  ): Promise<PageDetail | null> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return null;
    }

    if (!pageId?.trim()) {
      console.warn('pageId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      return null;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è payload
    if (!validateUpdatePayload(payload)) {
      return null;
    }

    try {
      // üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º FormData –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–∞–π–ª–æ–≤
      const formData = new FormData();

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      if (payload.name !== undefined) {
        formData.append('name', payload.name);
      }
      if (payload.content !== undefined) {
        formData.append('content', payload.content);
      }

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ù–ï –ø—É—Å—Ç—ã–µ
      if (payload.title !== undefined && payload.title.trim()) {
        formData.append('title', payload.title.trim());
      }
      if (payload.description !== undefined && payload.description.trim()) {
        formData.append('description', payload.description.trim());
      }
      if (payload.keywords !== undefined && payload.keywords.trim()) {
        formData.append('keywords', payload.keywords.trim());
      }
      if (payload.slug !== undefined && payload.slug.trim()) {
        formData.append('slug', payload.slug.trim());
      }

      // Boolean –∏ enum –ø–æ–ª—è
      if (payload.is_published !== undefined) {
        formData.append('is_published', String(payload.is_published));
      }
      if (payload.page_type !== undefined) {
        formData.append('page_type', payload.page_type);
      }

      // üÜï –§–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (payload.file instanceof File) {
        formData.append('file', payload.file);
      }

      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É:', {
        pageId,
        name: payload.name,
        content: payload.content?.substring(0, 50) + '...',
        title: payload.title,
        description: payload.description,
        keywords: payload.keywords,
        slug: payload.slug,
        is_published: payload.is_published,
        page_type: payload.page_type,
        hasFile: payload.file instanceof File,
        fileName: payload.file?.name,
      });

      const { data } = await api.put<PageDetail>(
        `/sites/${siteId.value}/pages/${pageId}/`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        },
      );

      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data);

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!isValidPageDetail(data)) {
        console.warn(
          '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é PageDetail, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile:',
          data,
        );

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if (isValidPageFile(data)) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã –∫–∞–∫ PageFile, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PageDetail');
          const pageDetail = createPageDetailFromPageFile(data);

          Notify.create({
            type: 'positive',
            message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageDetail.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`,
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω–∞
          if (selectedPage.value?.id === pageId) {
            selectedPage.value = Object.freeze(pageDetail);
          }

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
          await fetchPages();
          return Object.freeze(pageDetail);
        }

        console.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã –Ω–∏ –∫–∞–∫ PageDetail, –Ω–∏ –∫–∞–∫ PageFile');
        throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç API');
      }

      Notify.create({
        type: 'positive',
        message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${data.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω–∞
      if (selectedPage.value?.id === pageId) {
        selectedPage.value = Object.freeze(data);
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
      await fetchPages();

      return Object.freeze(data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      handleApiError(error as AxiosError<ApiError> | Error, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return null;
    }
  }

  /**
   * –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (PATCH)
   */
  async function patchPage(pageId: string, payload: PageUpdatePayload): Promise<PageDetail | null> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return null;
    }

    if (!pageId?.trim()) {
      console.warn('pageId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      return null;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è payload
    if (!validateUpdatePayload(payload)) {
      return null;
    }

    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º FormData, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π JSON
      let requestData: FormData | PageUpdatePayload;
      const headers: Record<string, string> = {};

      if (payload.file) {
        // üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º FormData –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª
        const formData = new FormData();

        Object.entries(payload).forEach(([key, value]) => {
          if (value !== undefined) {
            if (key === 'file' && value instanceof File) {
              formData.append(key, value);
            } else if (typeof value === 'boolean') {
              formData.append(key, String(value));
            } else if (typeof value === 'string') {
              formData.append(key, value);
            }
          }
        });

        requestData = formData;
        headers['Content-Type'] = 'multipart/form-data';
      } else {
        // –û–±—ã—á–Ω—ã–π JSON –±–µ–∑ —Ñ–∞–π–ª–∞
        requestData = payload;
        headers['Content-Type'] = 'application/json';
      }

      const { data } = await api.patch<PageDetail>(
        `/sites/${siteId.value}/pages/${pageId}/`,
        requestData,
        { headers },
      );

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!isValidPageDetail(data)) {
        console.warn(
          '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é PageDetail, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile:',
          data,
        );

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ PageFile, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if (isValidPageFile(data)) {
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã –∫–∞–∫ PageFile, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PageDetail');
          const pageDetail = createPageDetailFromPageFile(data);

          Notify.create({
            type: 'positive',
            message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${pageDetail.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`,
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω–∞
          if (selectedPage.value?.id === pageId) {
            selectedPage.value = Object.freeze(pageDetail);
          }

          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
          await fetchPages();
          return Object.freeze(pageDetail);
        }

        console.error('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã –Ω–∏ –∫–∞–∫ PageDetail, –Ω–∏ –∫–∞–∫ PageFile');
        throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç API');
      }

      Notify.create({
        type: 'positive',
        message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${data.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –æ–Ω–∞
      if (selectedPage.value?.id === pageId) {
        selectedPage.value = Object.freeze(data);
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
      await fetchPages();

      return Object.freeze(data);
    } catch (error) {
      handleApiError(
        error as AxiosError<ApiError> | Error,
        '–ù–µ —É–¥–∞–ª–æ—Å—å —á–∞—Å—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.',
      );
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async function deletePage(pageId: string): Promise<boolean> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return false;
    }

    if (!pageId?.trim()) {
      console.warn('pageId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      return false;
    }

    try {
      await api.delete(`/sites/${siteId.value}/pages/${pageId}/`);

      Notify.create({
        type: 'positive',
        message: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
      });

      // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ–Ω–∞
      if (selectedPage.value?.id === pageId) {
        selectedPage.value = null;
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
      await fetchPages();

      return true;
    } catch (error) {
      handleApiError(error as AxiosError<ApiError> | Error, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return false;
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async function togglePagePublication(pageId: string): Promise<boolean> {
    if (!pageId?.trim()) {
      console.warn('pageId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      return false;
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
    const page = pages.value.find((p) => p.id === pageId);
    if (!page) {
      Notify.create({
        type: 'negative',
        message: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ',
      });
      return false;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    const newStatus = !page.is_published;

    const result = await patchPage(pageId, {
      is_published: newStatus,
    });

    return result !== null;
  }

  // === –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ===

  /**
   * üÜï –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
   */
  async function bulkDeletePages(pageIds: readonly string[]): Promise<boolean> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return false;
    }

    if (!pageIds.length) {
      console.warn('–ú–∞—Å—Å–∏–≤ pageIds –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return false;
    }

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ DELETE –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.all(pageIds.map((id) => api.delete(`/sites/${siteId.value}/pages/${id}/`)));

      Notify.create({
        type: 'positive',
        message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${pageIds.length} —Å—Ç—Ä–∞–Ω–∏—Ü`,
      });

      // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
      if (selectedPage.value && pageIds.includes(selectedPage.value.id)) {
        selectedPage.value = null;
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
      await fetchPages();

      return true;
    } catch (error) {
      handleApiError(
        error as AxiosError<ApiError> | Error,
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü.',
      );
      return false;
    }
  }

  /**
   * üÜï –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  async function bulkUpdatePageStatus(
    pageIds: readonly string[],
    isPublished: boolean,
  ): Promise<boolean> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return false;
    }

    if (!pageIds.length) {
      console.warn('–ú–∞—Å—Å–∏–≤ pageIds –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return false;
    }

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ PATCH –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.all(
        pageIds.map((id) =>
          api.patch(`/sites/${siteId.value}/pages/${id}/`, { is_published: isPublished }),
        ),
      );

      Notify.create({
        type: 'positive',
        message: `–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${pageIds.length} —Å—Ç—Ä–∞–Ω–∏—Ü`,
      });

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü
      await fetchPages();

      return true;
    } catch (error) {
      handleApiError(
        error as AxiosError<ApiError> | Error,
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.',
      );
      return false;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  function searchPagesByName(searchTerm: string): readonly PageFile[] {
    if (!searchTerm?.trim()) {
      return pages.value;
    }

    const term = searchTerm.toLowerCase().trim();
    return pages.value.filter(
      (page) =>
        page?.name?.toLowerCase().includes(term) ||
        page?.title?.toLowerCase().includes(term) ||
        page?.slug?.toLowerCase().includes(term),
    );
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  function clearState(): void {
    pages.value = [];
    selectedPage.value = null;
    pagination.reset();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  function clearSelectedPage(): void {
    selectedPage.value = null;
  }

  // === –í–û–ó–í–†–ê–©–ê–ï–ú –ü–£–ë–õ–ò–ß–ù–´–ô API ===
  return {
    // State
    pages: computed(() => pages.value),
    selectedPage: computed(() => selectedPage.value),
    loading: pagination.loading,

    // Getters
    publishedPages,
    unpublishedPages,

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    currentPage: computed(() => pagination.currentPage.value),
    pageSize: computed(() => pagination.pageSize.value),
    totalCount: computed(() => pagination.totalCount.value),
    totalPages: computed(() => pagination.totalPages.value),
    hasNext: computed(() => pagination.hasNext.value),
    hasPrevious: computed(() => pagination.hasPrevious.value),
    qTablePagination: pagination.qTablePagination,

    // –û–ø–µ—Ä–∞—Ü–∏–∏
    fetchPages,
    fetchPageById,
    createPage,
    updatePage,
    patchPage,
    deletePage,
    togglePagePublication,
    bulkDeletePages,
    bulkUpdatePageStatus,
    searchPagesByName,
    clearState,
    clearSelectedPage,

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º–µ—Ç–æ–¥—ã
    goToPage: pagination.goToPage,
    goToNextPage: pagination.goToNextPage,
    goToPreviousPage: pagination.goToPreviousPage,
    handleTableRequest: pagination.handleTableRequest,

    // –£—Ç–∏–ª–∏—Ç—ã
    isValidPageFile,
    isValidPageDetail,
    isValidPagesArray,
    createPageDetailFromPageFile,
    createPageDetailWithDefaults,
  };
});
