import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import { api } from 'boot/axios';
import { Notify } from 'quasar';
import type { AxiosError } from 'axios';
import {
  usePagination,
  type PaginationResponse,
  type PaginationParams,
} from 'src/composables/usePagination';

const VITE_SITE_ID = import.meta.env.VITE_SITE_ID;

// ============================================================================
// –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –°–¢–†–û–ì–û–ô –¢–ò–ü–ò–ó–ê–¶–ò–ò
// ============================================================================

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (legacy, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å tree API)
 */
export interface ServiceCategoryHierarchyItem {
  id: string;
  name: string;
  slug: string;
  brief: string;
  is_published: boolean;
  order: number;
  parent_id: string | null;
  level: number;
  has_children: boolean;
}

/**
 * –û—Ç–≤–µ—Ç –æ—Ç hierarchy API (legacy, –º–æ–∂–µ—Ç –±—ã—Ç—å —É–±—Ä–∞–Ω –≤ –±—É–¥—É—â–µ–º)
 */
export interface ServiceCategoryHierarchyResponse {
  categories: ServiceCategoryHierarchyItem[];
  meta: {
    total_count: number;
    max_level: number;
  };
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface ServiceCategoryParentRef {
  id: string;
  name: string;
  slug: string;
  is_published: boolean;
  order: number;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –ø–æ–ª—è–º–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏–∑ API
 */
export interface ServiceCategoryFile {
  id: string;
  name: string;
  slug: string;
  brief: string;
  is_published: boolean;
  site: string;
  parent: ServiceCategoryParentRef | null;
  order: number;
  file: string | null;
  blurhash: string | null;
  // üéØ –ü–æ–ª—è –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
  level: number;
  has_children: boolean;
  // –ù–ï–¢ parent_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º parent?.id
}

/**
 * –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface ServiceCategoryDetail extends ServiceCategoryFile {
  creator: {
    id: string;
    email: string;
    role: string;
  } | null;
  created: string; // ISO DateTime
  updated: string; // ISO DateTime
}

/**
 * Payload –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface ServiceCategoryCreatePayload {
  name: string;
  brief?: string;
  is_published?: boolean;
  parent?: string | null; // ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  order?: number;
  file?: string | null;
}

/**
 * Payload –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
export interface ServiceCategoryUpdatePayload {
  name?: string;
  brief?: string;
  is_published?: boolean;
  parent?: string | null; // ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  order?: number;
  file?: string | null;
}

/**
 * –û–ø—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
 */
export interface ServiceCategoryOption {
  id: string;
  name: string;
  slug: string;
  brief?: string;
  level: number;
  has_children: boolean;
  display_name: string;
  is_published: boolean;
}

/**
 * –£–∑–µ–ª –¥–µ—Ä–µ–≤–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export interface ServiceCategoryTreeNode {
  id: string;
  label: string;
  children?: ServiceCategoryTreeNode[];
  category: ServiceCategoryFile;
  icon: string;
  iconColor: string;
  disabled: boolean;
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–æ–∫ –æ—Ç API
 */
interface ApiError {
  detail?: string;
  message?: string;
  [key: string]: unknown;
}

// ============================================================================
// STORE –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï
// ============================================================================

export const useServiceCategoriesStore = defineStore('serviceCategories', () => {
  // === STATE ===
  const serviceCategories = ref<ServiceCategoryFile[]>([]);
  const selectedServiceCategory = ref<ServiceCategoryDetail | null>(null);

  // üéØ –ù–û–í–û–ï: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const allCategoriesCache = ref<ServiceCategoryFile[]>([]);
  const isAllCategoriesCacheLoaded = ref(false);

  // Legacy –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å —É–±—Ä–∞–Ω—ã –≤ –±—É–¥—É—â–µ–º)
  const hierarchyData = ref<ServiceCategoryHierarchyItem[]>([]);
  const hierarchyMeta = ref<{ total_count: number; max_level: number }>({
    total_count: 0,
    max_level: 0,
  });
  const hierarchyLoading = ref(false);

  // === GETTERS ===
  const siteId = computed(() => VITE_SITE_ID);

  // === PAGINATION ===

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  const fetchServiceCategoriesWithPagination = async (
    url?: string,
    params?: PaginationParams,
  ): Promise<PaginationResponse<ServiceCategoryFile>> => {
    if (!siteId.value) {
      throw new Error('VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
    }

    try {
      let requestUrl: string;
      let requestParams: Record<string, string | number | boolean> = {};

      if (url) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É (next/previous)
        requestUrl = url;
      } else {
        // –°—Ç—Ä–æ–∏–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        requestUrl = `/sites/${siteId.value}/service-categories/`;
        // –§–∏–ª—å—Ç—Ä—É–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
        requestParams = Object.entries(params || {}).reduce(
          (acc, [key, value]) => {
            if (value !== undefined) {
              acc[key] = value;
            }
            return acc;
          },
          {} as Record<string, string | number | boolean>,
        );
      }

      const { data } = await api.get<PaginationResponse<ServiceCategoryFile>>(requestUrl, {
        params: url ? {} : requestParams,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –µ—Å—Ç—å - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ fetchServiceCategories
      serviceCategories.value = data.results;

      return data;
    } catch (error) {
      handleApiError(error as AxiosError<ApiError>, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥.');
      throw error;
    }
  };

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const pagination = usePagination<ServiceCategoryFile>(fetchServiceCategoriesWithPagination, {
    defaultPageSize: 10,
    defaultSortBy: 'order',
    defaultDescending: false,
  });

  // === HELPER FUNCTIONS ===

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
   */
  function handleApiError(error: AxiosError<ApiError>, defaultMessage: string): void {
    console.error(defaultMessage, error);
    let errorMessage = defaultMessage;
    const errorData = error.response?.data;

    if (typeof errorData === 'string') {
      errorMessage = errorData;
    } else if (errorData?.detail) {
      errorMessage = errorData.detail;
    } else if (errorData?.message) {
      errorMessage = errorData.message;
    } else if (error.message) {
      errorMessage = error.message;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—è–º
    if (errorData && typeof errorData === 'object' && !errorData.detail && !errorData.message) {
      const fieldErrors = Object.entries(errorData)
        .map(([key, value]) => `${key}: ${Array.isArray(value) ? value.join(', ') : String(value)}`)
        .join('; ');
      if (fieldErrors) errorMessage = fieldErrors;
    }

    Notify.create({
      type: 'negative',
      message: errorMessage,
      timeout: 5000,
    });
  }

  /**
   * üéØ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º parent?.id
   */
  function sortByHierarchy(categories: ServiceCategoryFile[]): ServiceCategoryFile[] {
    if (categories.length === 0) {
      return categories;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–µ—Ç–µ–π
    const childrenMap = new Map<string | null, ServiceCategoryFile[]>();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ parent?.id
    categories.forEach((category) => {
      const parentId = category.parent?.id || null;
      if (!childrenMap.has(parentId)) {
        childrenMap.set(parentId, []);
      }
      childrenMap.get(parentId)!.push(category);
    });

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
    function buildHierarchicalList(parentId: string | null): ServiceCategoryFile[] {
      const children = childrenMap.get(parentId) || [];
      const result: ServiceCategoryFile[] = [];

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π –ø–æ order, –∑–∞—Ç–µ–º –ø–æ –∏–º–µ–Ω–∏
      children.sort((a, b) => {
        if (a.order !== b.order) return a.order - b.order;
        return a.name.localeCompare(b.name);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –µ–≥–æ –¥–µ—Ç–µ–π
      children.forEach((child) => {
        result.push(child);
        result.push(...buildHierarchicalList(child.id));
      });

      return result;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (parent = null)
    return buildHierarchicalList(null);
  }

  /**
   * üéØ –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
   */
  async function loadAllCategoriesIntoCache(): Promise<ServiceCategoryFile[]> {
    if (isAllCategoriesCacheLoaded.value && allCategoriesCache.value.length > 0) {
      return allCategoriesCache.value;
    }

    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–µ—à...');

    const allCategories: ServiceCategoryFile[] = [];

    try {
      // –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      pagination.clearFilters();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      let response = await fetchServiceCategoriesWithPagination();
      allCategories.push(...response.results);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      while (response.next) {
        response = await fetchServiceCategoriesWithPagination(response.next);
        allCategories.push(...response.results);
      }

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueCategories = Array.from(
        new Map(allCategories.map((cat) => [cat.id, cat])).values(),
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
      allCategoriesCache.value = uniqueCategories;
      isAllCategoriesCacheLoaded.value = true;

      // üéØ –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      updateHierarchyMetaFromAllCategories(uniqueCategories);

      console.log(`‚úÖ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–µ—à: ${uniqueCategories.length}`);
      return uniqueCategories;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw error;
    }
  }

  /**
   * üéØ –ù–û–í–û–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  function updateHierarchyMetaFromAllCategories(allCategories: ServiceCategoryFile[]): void {
    if (!allCategories || allCategories.length === 0) {
      hierarchyMeta.value = {
        total_count: 0,
        max_level: 0,
      };
      return;
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å—Ä–µ–¥–∏ –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const maxLevel = allCategories.reduce((max, cat) => Math.max(max, cat.level), 0);

    hierarchyMeta.value = {
      total_count: allCategories.length, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      max_level: maxLevel,
    };

    console.log(
      `üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –≤—Å–µ–≥–æ=${allCategories.length}, –º–∞–∫—Å_—É—Ä–æ–≤–µ–Ω—å=${maxLevel}`,
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –∏–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  function getServiceCategoryOptionsFromCache(searchQuery = ''): ServiceCategoryOption[] {
    const categories = isAllCategoriesCacheLoaded.value
      ? allCategoriesCache.value
      : serviceCategories.value;

    const filteredCategories = categories.filter((category) => {
      if (!searchQuery) return true;
      const query = searchQuery.toLowerCase();
      return (
        category.name.toLowerCase().includes(query) ||
        (category.brief && category.brief.toLowerCase().includes(query))
      );
    });

    return filteredCategories.map((category) => ({
      id: category.id,
      name: category.name,
      slug: category.slug,
      brief: category.brief,
      level: category.level,
      has_children: category.has_children,
      is_published: category.is_published,
      display_name:
        '‚Äî'.repeat(category.level) +
        ' ' +
        category.name +
        (category.has_children ? ' üìÅ' : '') +
        (!category.is_published ? ' (—Å–∫—Ä—ã—Ç–æ)' : ''),
    }));
  }

  /**
   * üéØ –ù–û–í–û–ï: –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–µ—à –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö
   */
  function invalidateCache(): void {
    console.log('üóëÔ∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à...');
    isAllCategoriesCacheLoaded.value = false;
    allCategoriesCache.value = [];
  }

  // === LEGACY HIERARCHY API (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===

  /**
   * Legacy –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å —É–±—Ä–∞–Ω)
   */
  async function fetchServiceCategoriesHierarchy(): Promise<ServiceCategoryHierarchyItem[]> {
    if (!siteId.value) {
      throw new Error('VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
    }

    hierarchyLoading.value = true;
    try {
      const { data } = await api.get<ServiceCategoryHierarchyResponse>(
        `/sites/${siteId.value}/service-categories/hierarchy/`,
      );

      hierarchyData.value = data.categories;
      hierarchyMeta.value = data.meta;

      return data.categories;
    } catch (error) {
      handleApiError(
        error as AxiosError<ApiError>,
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥.',
      );
      throw error;
    } finally {
      hierarchyLoading.value = false;
    }
  }

  // === CRUD OPERATIONS ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
   */
  async function fetchServiceCategoryById(
    categoryId: string,
  ): Promise<ServiceCategoryDetail | null> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return null;
    }
    try {
      const { data } = await api.get<ServiceCategoryDetail>(
        `/sites/${siteId.value}/service-categories/${categoryId}/`,
      );
      selectedServiceCategory.value = data;
      return data;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.');
      selectedServiceCategory.value = null;
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async function createServiceCategory(
    payload: ServiceCategoryCreatePayload,
  ): Promise<ServiceCategoryDetail | null> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return null;
    }
    try {
      const { data } = await api.post<ServiceCategoryDetail>(
        `/sites/${siteId.value}/service-categories/`,
        payload,
      );
      Notify.create({
        type: 'positive',
        message: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ "${data.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`,
      });

      // üéØ –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
      invalidateCache();

      return data;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.');
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async function updateServiceCategory(
    categoryId: string,
    payload: ServiceCategoryUpdatePayload,
  ): Promise<ServiceCategoryDetail | null> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return null;
    }
    try {
      const { data } = await api.put<ServiceCategoryDetail>(
        `/sites/${siteId.value}/service-categories/${categoryId}/`,
        payload,
      );
      Notify.create({
        type: 'positive',
        message: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ "${data.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`,
      });

      // üéØ –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      invalidateCache();

      if (selectedServiceCategory.value?.id === categoryId) {
        await fetchServiceCategoryById(categoryId);
      }
      return data;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.');
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async function deleteServiceCategory(categoryId: string): Promise<boolean> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return false;
    }
    try {
      await api.delete(`/sites/${siteId.value}/service-categories/${categoryId}/`);
      Notify.create({
        type: 'positive',
        message: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.',
      });

      // üéØ –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
      invalidateCache();

      if (selectedServiceCategory.value?.id === categoryId) {
        selectedServiceCategory.value = null;
      }
      return true;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥.');
      return false;
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async function bulkDeleteServiceCategories(categoryIds: string[]): Promise<boolean> {
    if (!siteId.value) {
      Notify.create({ type: 'negative', message: 'VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.' });
      return false;
    }

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ DELETE –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.all(
        categoryIds.map((id) => api.delete(`/sites/${siteId.value}/service-categories/${id}/`)),
      );

      Notify.create({
        type: 'positive',
        message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${categoryIds.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥.`,
      });

      // üéØ –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      invalidateCache();

      return true;
    } catch (err) {
      handleApiError(err as AxiosError<ApiError>, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥.');
      return false;
    }
  }

  // === SEARCH AND FILTER OPERATIONS ===

  /**
   * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tree API (legacy)
   */
  async function searchServiceCategoriesTree(query: string): Promise<ServiceCategoryFile[]> {
    if (!siteId.value) {
      throw new Error('VITE_SITE_ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
    }

    try {
      const { data } = await api.get<PaginationResponse<ServiceCategoryFile>>(
        `/sites/${siteId.value}/service-categories/tree/`,
        {
          params: { search: query },
        },
      );

      return data.results;
    } catch (error) {
      handleApiError(error as AxiosError<ApiError>, '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥.');
      throw error;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async function searchServiceCategories(query: string): Promise<ServiceCategoryFile[]> {
    pagination.setSearch(query);
    return await pagination.fetchData();
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  async function filterServiceCategories(
    filters: Record<string, string | number | boolean>,
  ): Promise<ServiceCategoryFile[]> {
    Object.entries(filters).forEach(([key, value]) => {
      pagination.setFilter(key, value);
    });
    return await pagination.fetchData();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  async function clearFilters(): Promise<ServiceCategoryFile[]> {
    pagination.clearFilters();
    return await pagination.fetchData();
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
   */
  async function fetchServiceCategories(url?: string): Promise<ServiceCategoryFile[]> {
    const data = await pagination.fetchData(url);
    // üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    const sortedData = sortByHierarchy(data);
    serviceCategories.value = sortedData;
    return sortedData;
  }

  /**
   * üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async function searchCategoriesForAutocomplete(query: string): Promise<ServiceCategoryOption[]> {
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
    await loadAllCategoriesIntoCache();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
    return getServiceCategoryOptionsFromCache(query);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  function clearSelectedServiceCategory(): void {
    selectedServiceCategory.value = null;
  }

  // === RETURN STORE INTERFACE ===
  return {
    // State
    serviceCategories,
    selectedServiceCategory,
    hierarchyData, // Legacy
    hierarchyMeta,
    hierarchyLoading, // Legacy
    loading: pagination.loading,
    allCategoriesCache: computed(() => allCategoriesCache.value), // üéØ –ù–û–í–û–ï: –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–µ—à—É

    // Pagination state
    currentPage: computed(() => pagination.currentPage.value),
    pageSize: computed(() => pagination.pageSize.value),
    totalCount: computed(() => pagination.totalCount.value),
    totalPages: computed(() => pagination.totalPages.value),
    hasNext: computed(() => pagination.hasNext.value),
    hasPrevious: computed(() => pagination.hasPrevious.value),
    qTablePagination: pagination.qTablePagination,

    // Computed
    serviceCategoryOptions: computed(() => getServiceCategoryOptionsFromCache()),

    // Methods
    fetchServiceCategories,
    fetchServiceCategoriesHierarchy, // Legacy - –º–æ–∂–µ—Ç –±—ã—Ç—å —É–±—Ä–∞–Ω
    searchServiceCategoriesTree, // Legacy - –º–æ–∂–µ—Ç –±—ã—Ç—å —É–±—Ä–∞–Ω
    fetchServiceCategoryById,
    createServiceCategory,
    updateServiceCategory,
    deleteServiceCategory,
    clearSelectedServiceCategory,
    searchServiceCategories,
    filterServiceCategories,
    clearFilters,
    bulkDeleteServiceCategories,
    searchCategoriesForAutocomplete,
    loadAllCategoriesIntoCache, // üéØ –ù–û–í–û–ï: –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞
    invalidateCache, // üéØ –ù–û–í–û–ï: –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞

    // Pagination methods
    goToPage: pagination.goToPage,
    goToNextPage: pagination.goToNextPage,
    goToPreviousPage: pagination.goToPreviousPage,
    handleTableRequest: pagination.handleTableRequest,
  };
});
